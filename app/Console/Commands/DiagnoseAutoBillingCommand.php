<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Shared\Models\Store;
use App\Shared\Models\Subscription;
use App\Shared\Models\Invoice;
use App\Shared\Models\Plan;

class DiagnoseAutoBillingCommand extends Command
{
    protected $signature = 'billing:diagnose-auto {--store-id= : Check specific store ID} {--recent= : Show recent stores (default: 10)}';
    protected $description = 'Diagnosticar el sistema de facturación automática de tiendas';

    public function handle()
    {
        $this->info('🔍 DIAGNÓSTICO DEL SISTEMA DE FACTURACIÓN AUTOMÁTICA');
        $this->newLine();

        if ($storeId = $this->option('store-id')) {
            $this->diagnoseSpecificStore($storeId);
        } else {
            $this->diagnoseSystemOverview();
        }
    }

    private function diagnoseSpecificStore($storeId): void
    {
        $store = Store::with(['plan', 'subscription', 'invoices'])->find($storeId);

        if (!$store) {
            $this->error("❌ Store with ID {$storeId} not found");
            return;
        }

        $this->info("🏪 DIAGNÓSTICO DE TIENDA: {$store->name}");
        $this->table(['Campo', 'Valor'], [
            ['ID', $store->id],
            ['Nombre', $store->name],
            ['Slug', $store->slug],
            ['Estado', $store->status],
            ['Plan', $store->plan ? $store->plan->name : '❌ SIN PLAN'],
            ['Creada', $store->created_at->format('Y-m-d H:i:s')],
        ]);

        $this->newLine();

        // Verificar suscripción
        if ($store->subscription) {
            $subscription = $store->subscription;
            $this->info("✅ SUSCRIPCIÓN ENCONTRADA");
            $this->table(['Campo', 'Valor'], [
                ['ID', $subscription->id],
                ['Estado', $subscription->status],
                ['Ciclo', $subscription->billing_cycle],
                ['Inicio período', $subscription->current_period_start],
                ['Fin período', $subscription->current_period_end],
                ['Próxima facturación', $subscription->next_billing_date],
                ['Monto próximo', '$' . number_format($subscription->next_billing_amount, 0, ',', '.')],
                ['Auto-creada', $subscription->metadata['auto_created_on_store_creation'] ?? 'No especificado'],
            ]);
        } else {
            $this->error("❌ NO TIENE SUSCRIPCIÓN");
        }

        $this->newLine();

        // Verificar facturas
        $invoices = $store->invoices()->orderBy('created_at', 'desc')->limit(5)->get();
        if ($invoices->count() > 0) {
            $this->info("📄 FACTURAS (últimas 5):");
            $rows = [];
            foreach ($invoices as $invoice) {
                $isFirst = $invoice->metadata['is_first_invoice'] ?? false;
                $autoGenerated = $invoice->metadata['auto_generated'] ?? false;
                
                $rows[] = [
                    $invoice->invoice_number,
                    $invoice->status,
                    '$' . number_format($invoice->amount, 0, ',', '.'),
                    $invoice->period,
                    $invoice->issue_date->format('Y-m-d'),
                    $invoice->due_date->format('Y-m-d'),
                    $isFirst ? '🆕 Primera' : ($autoGenerated ? '🤖 Auto' : '👤 Manual')
                ];
            }
            $this->table(['Número', 'Estado', 'Monto', 'Período', 'Emisión', 'Vencimiento', 'Tipo'], $rows);
        } else {
            $this->error("❌ NO TIENE FACTURAS");
        }
    }

    private function diagnoseSystemOverview(): void
    {
        $recent = (int) $this->option('recent') ?: 10;

        // Estadísticas generales
        $totalStores = Store::count();
        $storesWithSubscription = Store::whereHas('subscription')->count();
        $storesWithInvoices = Store::whereHas('invoices')->count();
        $autoCreatedSubscriptions = Subscription::whereJsonContains('metadata->auto_created_on_store_creation', true)->count();

        $this->info("📊 ESTADÍSTICAS GENERALES:");
        $this->table(['Métrica', 'Cantidad', 'Porcentaje'], [
            ['Total de tiendas', $totalStores, '100%'],
            ['Con suscripción', $storesWithSubscription, round(($storesWithSubscription / $totalStores) * 100, 1) . '%'],
            ['Con facturas', $storesWithInvoices, round(($storesWithInvoices / $totalStores) * 100, 1) . '%'],
            ['Suscripciones auto-creadas', $autoCreatedSubscriptions, round(($autoCreatedSubscriptions / $storesWithSubscription) * 100, 1) . '%'],
        ]);

        $this->newLine();

        // Tiendas recientes
        $recentStores = Store::with(['plan', 'subscription'])
            ->orderBy('created_at', 'desc')
            ->limit($recent)
            ->get();

        $this->info("🕒 TIENDAS RECIENTES (últimas {$recent}):");
        $rows = [];
        foreach ($recentStores as $store) {
            $hasSubscription = $store->subscription ? '✅' : '❌';
            $autoCreated = $store->subscription && ($store->subscription->metadata['auto_created_on_store_creation'] ?? false) ? '🤖' : '👤';
            $invoiceCount = $store->invoices()->count();
            
            $rows[] = [
                $store->id,
                $store->name,
                $store->plan ? $store->plan->name : 'Sin plan',
                $store->created_at->format('Y-m-d H:i'),
                $hasSubscription,
                $autoCreated,
                $invoiceCount
            ];
        }
        $this->table(['ID', 'Nombre', 'Plan', 'Creada', 'Suscripción', 'Auto', 'Facturas'], $rows);

        $this->newLine();

        // Problemas detectados
        $this->info("🚨 PROBLEMAS DETECTADOS:");
        $storesWithoutSubscription = Store::whereDoesntHave('subscription')->count();
        $storesWithoutInvoices = Store::whereDoesntHave('invoices')->count();
        
        if ($storesWithoutSubscription > 0) {
            $this->warn("⚠️  {$storesWithoutSubscription} tiendas sin suscripción");
        }
        
        if ($storesWithoutInvoices > 0) {
            $this->warn("⚠️  {$storesWithoutInvoices} tiendas sin facturas");
        }

        if ($storesWithoutSubscription === 0 && $storesWithoutInvoices === 0) {
            $this->info("✅ No se detectaron problemas críticos");
        }

        $this->newLine();
        $this->info("💡 Para diagnosticar una tienda específica: php artisan billing:diagnose-auto --store-id=123");
    }
} 